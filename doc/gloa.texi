\input texinfo
@c -*- texinfo -*-

@c %**start of header
@setfilename gloa.info
@documentencoding UTF-8
@settitle Gloa Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2023 Raven Hallsby@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@titlepage
@title Gloa Reference Manual
@subtitle Article/Document management software
@author Raven Hallsby

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Gloa

This document describes Gloa version @value{VERSION}, a document and
bibliographic management tool.  Gloa is similar in spirit to tools like
@uref{https://calibre.com, Calibre}, @uref{https://zotero.com, Zotero},
and Mendeley.

@menu
* Introduction::                What is Gloa?
* Importing Documents::         Getting documents into Gloa.
* The Database::                How Gloa stores and finds things.
* Searching::                   Searching the database.
* Exporting::                   Getting information out of Gloa.
* Interacting with Gloa::       Using Gloa.
* User Configuration::          Customizing Gloa.
* Using Gloa from Guile::       Using Gloa from Guile for other uses.
* Contributing::                You can help too!
@end menu

@node Introduction
@chapter Introduction

@cindex purpose
Gloa is a document and bibliographic management tool.

@menu
* Why was Gloa made?::          Why was Gloa made?
* Features::                    What does Gloa offer to users?
@end menu

@node Why was Gloa made?
@section Why was Gloa made?
Gloa@tie{}(Guile's Library of Alexandria) is intended to be a GNU-like
replacement for tools like Zotero.  While Zotero is a fine program for
many people and use-cases, its reliance on JavaScript makes it difficult
to port to Guix, as JavaScript is difficult to bootstrap.  Also, the
author is fond of s-expressions, Lisps, and using Emacs to manage their
life.

Gloa is (eventually) intended to be a full replacement for tools like
Zotero, allowing users to manage research articles, annotated articles,
research papers, and their associated bibliography information in a
convenient way.

@node Features
@section Features

Gloa's main features will include:
@itemize
@item
The ability to import PDFs with their bibliographic information.
@pxref{Importing Documents} for how to import documents.
@item
The ability to export bibliography information.  @pxref{Exporting} for
how to export bibliography information.
@item
An SQLite database for quickly searching, organizing, and finding
articles.  @xref{The Database} for more information on the database, its
schema, and how it is used.
@item
Searching the database with a variety of terms using a variety of
syntaxes. @pxref{Searching} for the terms that can be used for searching
and the various syntaxes supported.
@item
The ability for the user to perfom configuration of Gloa through a
configuration file.  @xref{User Configuration} for more information.
@item
REPL support.  The user can open an interactive instance of Gloa to
manually perform operations on Gloa and its database, like
@pxref{Running Guile Interactively,,, guile, GNU Guile Reference
Manual}.
@item
Server support.  Gloa will support opening a REPL server that allows
other programs to send s-expressions to Gloa for evaluation.  @xref{Gloa
as a Server} for how to interact with Gloa when it is acting as a
server.
@item
API exporting for inclusion in other Guile programs.  Gloa will export
its major functions through Guile's module system.  @xref{Using Gloa
from Guile} for more information.
@end itemize

@node Importing Documents
@chapter Importing Documents

A variety of formats will eventually be supported, but because academia
has settled on using BibTeX as the default reference format, that is
currently the best (and only) supported format.

When a document is imported, a copy of the provided document is made,
and stored in @code{%default-storage-directory}.  This defaults to
@file{$XDG_DATA_HOME/gloa/}, which usually expands to
@file{$HOME/.local/gloa/}.  Newly imported documents get renamed
slightly to make finding them faster, and is done by hashing the
document.

@quotation TODO
What gets hashed to make a unique name for the PDF file is not currently
known.  I can hash just the metadata of the file (which would mean
bibliography information automatically ends up in the same spot), @b{OR}
I could hash the document itself.
@end quotation

@quotation TODO
MD5 is a fast enough hash algorithm, but I am not sure how many
collisions can eventually be encountered.  SHA @emph{would} work
instead, but that might be too slow, and I am not sure if I want to deal
with the ``broken'' SHA-1 problem.
@end quotation

@node The Database
@chapter The Database

Currently, the database defaults to
@file{$XDG_CACHE_HOME/gloa/gloa.sqlite}, which usually ends up expanding
to @file{$HOME/.cache/gloa/gloa.sqlite}.

@node Searching
@chapter Searching

Searching for documents is one of the most important functions of Gloa,
as people tend to accumulate @b{many} documents, and finding them can
become difficult.

@menu
* Search Terms::                Keywords that Gloa will understand.
* Search Syntax::               Ways to express queries.
@end menu

@node Search Terms
@section Search Terms

A selection of search terms are soft-reserved as keywords.  These
include:
@itemize
@item
@code{title}: The title of the document.
@item
@code{author}: The author of the document.  This keyword can be used
multiple times to specify multiple authors.
@end itemize

@node Search Syntax
@section Search Syntax

Gloa supports two search syntaxes.  The first is an s-expression-based
syntax, which is useful for programmatically creating search queries.
The second is a natural-language syntax, which is more convenient for
command-line searching and user-use.

The natural-language syntax will be converted to the s-expression syntax
before being executed.

@cindex syntax
@menu
* Sexp Syntax::                 A syntax using S-expressions.
* Natural Syntax::              A more natural syntax.
@end menu

@node Sexp Syntax
@subsection Sexp Syntax

The s-expression syntax is exactly as it sounds, you express your search
query as a combination of s-expression logical operators and search
terms with values.  An example is shown below:

@lisp
(and (title . "Sample title")
     (tags    '("example" "other")))
@end lisp

@node Natural Syntax
@subsection Natural Syntax

Sometimes the s-expression syntax is too verbose for a quick search,
particularly when using Gloa from the command-line.  So, Gloa will also
support a simpler query language that is loosely based on English
grammar.  The same example query from the previous section is used here.

@example
title:'Sample title' AND tags:'example,other'
@end example

@node Exporting
@chapter Exporting

Getting information out of Gloa is also important.  Users might be
especially interested in exporting bibliography information for
documents they have read for their own writing.

@menu
* Exporting Bibliography Information::  Getting bibliographies out.
* Exporting Everything::        Getting everything out of Gloa.
@end menu

@node Exporting Bibliography Information
@section Exporting Bibliography Information

Users can export bibliographies for selected documents and write them to
either a single bibliography file, or to multiple.  This can be used to
create a citation database for a paper or just to export bibliography
information.

Like when importing, Gloa supports writing the exported bibliography
information to multiple bibliography formats.  Again, BibTeX is the
best-supported bibliography format currently.

@node Exporting Everything
@section Exporting Everything

If Gloa is not the tool for you, you are able to export everything you
have collected in your Gloa database easily.

@menu
* Automatically Exporting::     Having Gloa export everything for you.
* Manually Exporting::          Exporting everything yourself.
@end menu

@node Automatically Exporting
@subsection Automatically Exporting

If you choose to have Gloa perform the export, it will take two steps:

@enumerate
@item
Dump all your documents to a single directory, @emph{without a
hierarchy}.  All files will be slightly renamed, starting with their
hash and then including a portion of their title, to prevent
accidentally giving two documents the file name.
@item
All your bibliography files, one for each corresponding document entry.
The bibliography file will have the same file name as the document,
except for the extension.
@end enumerate

@node Manually Exporting
@subsection Manually Exporting

If you do not wish for Gloa to export all of your files for you, you may
do this process manually. All your documents are stored in a single
location under @file{$XDG_DATA_HOME/gloa/}.

@quotation Warning
By manually exporting, you are ignoring the information within Gloa's
database. This means you may lose bibliographic information!
@end quotation

@node Interacting with Gloa
@chapter Interacting with Gloa
@cindex repl
@cindex REPL

The user can interact with Gloa in three ways:
@enumerate
@item
The command-line with single expressions.
@item
The Gloa REPL, which allows for programming higher-order operations and
longer-lasting sessions.
@item
The Gloa server, which is a Gloa REPL not intended for users, but for
other programs to use instead.
@end enumerate

@menu
* Interactive Gloa::            Using Gloa's REPL.
* Gloa as a Server::            Using Gloa as a server for other programs.
@end menu

@node Interactive Gloa
@section Interactive Gloa

This will eventually be used to implement a major mode for Emacs that
integrates with Gloa.  But because only s-expressions are sent back and
forth, it will be a generic protocol, allowing other programs to also
use the server provided by Gloa.

@node Gloa as a Server
@section Gloa as a Server

Gloa will also support running in a server mode, where it receives
s-expressions, attempts to execute them, and potentially returns the
results.

This server will be built with the associated Emacs major mode in mind.
However, because the server will just use Guile's built-in @pxref{REPL
Servers,,, guile, GNU Guile Reference Manual} and use s-expressions,
other tools will be able to interact with Gloa too.

When Gloa is running as a server, behave @b{exactly} the same as if the
user were directly interacting with Gloa's REPL.

@node User Configuration
@chapter User Configuration

@menu
* Command-line Options::        Changing Gloa's behavior at the shell.
* Configuration File::          Changing Gloa's behavior with a file.
@end menu

@node Command-line Options
@section Command-line Options

@node Configuration File
@section Configuration File
The user will be able to configure Gloa from either the command-line or
from a configuration file.  The configuration file has several, mutually
exclusive, supported locations.

@enumerate
@item
@file{$XDG_CONFIG_HOME/gloa/init.scm} is the first-searched
path.  Typically, @code{XDG_CONFIG_HOME} expands to @file{$HOME/.config}.
@item
@file{$HOME/.gloa.d/init.scm}
@item
@code{$HOME/.gloa.scm}
@end enumerate

These paths are scanned in the above order, stopping when the first path
contains a configuration.

@node Using Gloa from Guile
@chapter Using Gloa from Guile

Gloa exports its main interface as Guile modules @pxref{Creating Guile
Modules,,, guile, GNU Guile Reference Manual}, marking them as
declarative (@pxref{Declarative Modules,,, guile, GNU Guile Reference
Manual}).
Using this, any user may extend the functionality of Gloa using all of
Guile's available tools.

@node Contributing
@chapter Contributing
@cindex documentation

Guix is documented using the Texinfo system.

@menu
* Writing Documentation::       Improving & Writing Documentation.
@end menu

@node Writing Documentation
@section Writing Documentation

To render documentation, you must first make sure that you ran both
@command{./bootstrap} and @command{./configure} in your source tree.
After that you can run one of the following commands:

@itemize
@item @samp{make info} to compile the Info manual.
      You can check it with @command{info doc/gloa.info}.
@item @samp{make doc/gloa.info} to compile the Info manual.
      You can check it with @command{info doc/gloa.info}.
@item @samp{make html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/gloa.html} directory.
@item @samp{make doc/gloa.html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/gloa.html} directory.
@end itemize

@bye

@c Local Variables:
@c ispell-local-dictionary: "american";
@c End:
